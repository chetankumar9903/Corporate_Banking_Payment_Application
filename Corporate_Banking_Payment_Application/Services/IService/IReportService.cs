
//using Corporate_Banking_Payment_Application.DTOs;
//using Corporate_Banking_Payment_Application.Models;

//namespace Corporate_Banking_Payment_Application.Services.IService
//{
//    public interface IReportService
//    {
//        /// <summary>
//        /// Orchestrates the process of generating a report, uploading the file to Cloudinary, 
//        /// and saving the report metadata to the database.
//        /// </summary>
//        /// <param name="request">The DTO containing all generation parameters (type, dates, client/bank ID).</param>
//        /// <param name="currentUserId">The ID of the user generating the report.</param>
//        /// <param name="currentUserRole">The role of the user, used for authorization checks (SuperAdmin, BankUser, ClientUser).</param>
//        /// <returns>A DTO representing the newly created Report record.</returns>
//        Task<ReportDto> GenerateAndSaveReport(GenerateReportRequestDto request, int currentUserId, UserRole currentUserRole);

//        /// <summary>
//        /// Retrieves a list of reports previously generated by the specified user.
//        /// </summary>
//        /// <param name="userId">The ID of the user whose reports are being requested.</param>
//        /// <returns>A collection of Report DTOs.</returns>
//        Task<IEnumerable<ReportDto>> GetReportsByUser(int userId);

//        /// <summary>
//        /// Retrieves a single report record by ID.
//        /// </summary>
//        /// <param name="reportId">The ID of the report.</param>
//        /// <returns>The Report DTO, or null if not found.</returns>
//        Task<ReportDto?> GetReportById(int reportId);
//    }
//}


// FIX: Using lowercase namespaces to match your DTO/Model files
using corporate_banking_payment_application.DTOs;
using Corporate_Banking_Payment_Application.Models;

// This namespace is fine, assuming it's your project's convention
namespace Corporate_Banking_Payment_Application.Services.IService
{
    public interface IReportService
    {
        /// <summary>
        /// Orchestrates the process of generating a report, uploading the file to Cloudinary, 
        /// and saving the report metadata to the database.
        /// </summary>
        /// <param name="request">The DTO containing all generation parameters.</param>
        /// <param name="currentUserId">The ID of the user generating the report (from auth).</param>
        /// <param name="currentUserRole">The role of the user, used for authorization checks.</param>
        /// <returns>A DTO representing the newly created Report record.</returns>
        Task<ReportDto> GenerateAndSaveReport(GenerateReportRequestDto request, int currentUserId, UserRole currentUserRole);

        /// <summary>
        /// Retrieves a list of reports previously generated by the specified user.
        /// </summary>
        /// <param name="userId">The ID of the user whose reports are being requested.</param>
        /// <returns>A collection of Report DTOs.</returns>
        Task<IEnumerable<ReportDto>> GetReportsByUser(int userId);

        /// <summary>
        /// Retrieves a single report record by ID.
        /// </summary>
        /// <param name="reportId">The ID of the report.</param>
        /// <returns>The Report DTO, or null if not found.</returns>
        Task<ReportDto?> GetReportById(int reportId);
    }
}
