using Corporate_Banking_Payment_Application.Data;
using Corporate_Banking_Payment_Application.Models;
using Corporate_Banking_Payment_Application.Repository.IRepository;
using Microsoft.EntityFrameworkCore;

namespace Corporate_Banking_Payment_Application.Repository
{
    public class ReportRepository : IReportRepository
    {
        private readonly AppDbContext _context;

        public ReportRepository(AppDbContext context)
        {
            _context = context;
        }


        private IQueryable<Report> GetBaseQuery()
        {
            // Eager load the User for sorting/searching
            return _context.Reports.Include(r => r.User);
        }

        /// Adds a new Report record to the database after successful file upload to Cloudinary.
        public async Task<Report> AddReport(Report report)
        {
            _context.Reports.Add(report);
            await _context.SaveChangesAsync();
            return report;
        }

        /// Retrieves a single report record by its ID
        public async Task<Report?> GetReportById(int id)
        {
            return await _context.Reports
                .AsNoTracking()
                .FirstOrDefaultAsync(r => r.ReportId == id);
        }


        ///// Retrieves a list of reports generated by a specific user
        //public async Task<IEnumerable<Report>> GetReportsByUserId(int userId)
        //{
        //    return await _context.Reports
        //        .AsNoTracking()
        //        .Where(r => r.GeneratedBy == userId)
        //        // Order by newest first, as is common for reporting lists
        //        .OrderByDescending(r => r.GeneratedDate)
        //        .ToListAsync();
        //}

        public async Task<PagedResult<Report>> GetReportsByUserId(int userId, string? searchTerm, string? sortColumn, SortOrder? sortOrder, int pageNumber, int pageSize)
        {
            var query = GetBaseQuery()
                .AsNoTracking()
                .Where(r => r.GeneratedBy == userId);

            // 1. SEARCHING
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                searchTerm = searchTerm.ToLower();
                query = query.Where(r =>
                    r.ReportName.ToLower().Contains(searchTerm) ||
                    r.ReportType.ToString().ToLower().Contains(searchTerm)
                );
            }

            // Get TOTAL COUNT *after* searching
            var totalCount = await query.CountAsync();

            // 2. SORTING
            bool isDescending = sortOrder == SortOrder.DESC;

            if (!string.IsNullOrWhiteSpace(sortColumn))
            {
                switch (sortColumn.ToLower())
                {
                    case "reportname":
                        query = isDescending ? query.OrderByDescending(r => r.ReportName) : query.OrderBy(r => r.ReportName);
                        break;
                    case "reporttype":
                        query = isDescending ? query.OrderByDescending(r => r.ReportType) : query.OrderBy(r => r.ReportType);
                        break;
                    case "outputformat":
                        query = isDescending ? query.OrderByDescending(r => r.OutputFormat) : query.OrderBy(r => r.OutputFormat);
                        break;
                    case "generateddate":
                        query = isDescending ? query.OrderByDescending(r => r.GeneratedDate) : query.OrderBy(r => r.GeneratedDate);
                        break;
                    default:
                        query = isDescending ? query.OrderByDescending(r => r.GeneratedDate) : query.OrderBy(r => r.GeneratedDate);
                        break;
                }
            }
            else
            {
                // Default sort
                query = query.OrderByDescending(r => r.GeneratedDate);
            }

            // 3. PAGINATION
            var items = await query
                .Skip((pageNumber - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();

            return new PagedResult<Report>
            {
                Items = items,
                TotalCount = totalCount
            };
        }
    }
}
